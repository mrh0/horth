0 while true do
    if dup 10 < not do
        break
    end
end


1 "Hello World"
let fd str in
    fd, str unsafe cast(int) sizeof(int) +, str[]
    syscall write drop
end
0 exit


"Hello World" [2] cast(int) exit


6
let n in
	n '0' as int +
	let c in
		1 @c 1 syscall write drop
	end
end


start func fun1 in
    fun2 log
end

func fun2 -> string in
    "Hello World"
end
//Prints "Hello World" to std out

start func main -> int in
    10 20 add
end

func add int int -> int in
    +
end
//Exit code: 30

start func main -> int in
    10 20 add
end

inline func add int int -> int in
    +
end
//Exit code: 30


start func main -> int in
    '1' '1' f1
end

func f1 int int -> int in
    drop drop 1
end

func f1 char char -> int in
    drop drop 1
end


func str int -> string in
    let i in
    if (i == 0) do
        "Hello" ret
    end
    "World" ret
end

func test ref<int> in
    drop ret
end



func leap buf<char> int -> buf<char> in
    let b i in
    b as unsafe int i + as unsafe buf<char> ret
end

start func main -> int in
    16 new buf<char> dup dup as unsafe buf<int> 4 write 8 leap
    dup 'T' write next
    dup 'e' write next
    dup 's' write next
    dup 't' write
    0 as char write
    as unsafe string
    log
    1 ret
end