0 while true do
    if dup 10 < not do
        break
    end
end


1 "Hello World"
let fd str in
    fd, str unsafe cast(int) sizeof(int) +, str[]
    syscall write drop
end
0 exit


"Hello World" [2] cast(int) exit


6
let n in
	n '0' as int +
	let c in
		1 @c 1 syscall write drop
	end
end


start func fun1 in
    fun2 log
end

func fun2 -> string in
    "Hello World"
end
//Prints "Hello World" to std out

start func main -> int in
    10 20 add
end

func add int int -> int in
    +
end
//Exit code: 30

start func main -> int in
    10 20 add
end

inline func add int int -> int in
    +
end
//Exit code: 30


start func main -> int in
    '1' '1' f1
end

func f1 int int -> int in
    drop drop 1
end

func f1 char char -> int in
    drop drop 1
end


func str int -> string in
    let i in
    if (i == 0) do
        "Hello" ret
    end
    "World" ret
end

func test ref<int> in
    drop ret
end


inline func putChar buf<char> char -> buf<char> in
    let b c in
    b c write
    b next ret
end

inline func putChar buf<char> int -> buf<char> in
    as char putChar ret
end

start func main -> int in
    16 new buf<char> 4 writeLength
    'T' putChar
    'e' putChar
    's' putChar
    't' putChar
    0 putChar
    as! string
    log
    0 ret
end

inline func leap buf<char> int -> buf<char> in
    let b i in
    b as! int i + as! buf<char> ret
end

func writeLength buf<char> int -> buf<char> in
    let b v in
    b as! buf<int> v write
    b 8 leap ret
end

func concat string string -> string in
    let a b in

    a .length b .length +
    let len in

    len 8 + new buf<char>
    let buf in

    buf len writeLength drop

    a .length, a .data@, buf 8 leap
    copy

    b .length, b .data@, buf 8 a .length + leap
    copy

    buf as! string ret
end

start func main -> int in
    "Hello" "World" concat log
    0 ret
end
