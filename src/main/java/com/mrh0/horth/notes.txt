0:RAX, 1:RBX, tmp0:RCX, tmp1:RDX, stackstart: R12

//Manipulators
swap:
    xchg    rax, rbx
swap2:
    xchg    rax, [rsp]
    xchg    rbx, [rsp-8]
rot:
    xchg    rax, [rsp]
over:
    xchg    rax, rbx
    push    rax
over2:
    push    rbx
    push    rax
    mov     rax, [rsp-16]
    mov     rbx, [rsp-24]
drop:
    mov     rax, rbx
    pop     rbx
drop2:
    pop     rax
    pop     rbx
drop3:
    pop     rax
    pop     rax
    pop     rbx
dup:
    push    rbx
    mov     rbx, rax
dup2x:                  //duplicates 2 times 'dup dup'
    push    rbx
    push    rax
    mov     rbx, rax
dup3x:                  //duplicates 3 times 'dup dup dup'
    push    rbx
    push    rax
    push    rax
    mov     rbx, rax
dup2s:                  //duplicates first 2 'dup2'
    push    rbx
    push    rax
dup3s:                  //duplicates first 3 'dup3'
    push    [rsp]
    push    rbx
    push    rax

//internal
put1:
    push    rbx
    mov     rbx, rax
    mov     rax, <i>
put2:
    push    rbx
    push    rax
    mov     rbx, <i>
    mov     rax, <i>
put3:
    push    rbx
    push    rax
    mov     r10, <i>
    push    r10
    mov     rbx, <i>
    mov     rax, <i>
put4:
    push    rbx
    push    rax
    mov     r10, <i>
    push    r10
    mov     r11, <i>
    push    r11
    mov     rbx, <i>
    mov     rax, <i>

//Operands
add:
    add     rax, rbx
    pop     rbx
add_i:
    add     <i>, rax

//Keywords
if:
    cmp     rax, 0
    mov     rax, rbx
    pop     rbx
    jle     <label>

lessThan:
    mov     rcx, 0
    mov     rdx, 1
    cmp     rbx, rax
    cmovl   rcx, rdx
    pop     rbx
    mov     rax, rcx

and:
    and     rax, rbx
    pop     rbx

accessor64:
    add     rbx, rax
    mov     rax, [rbx + 8]
    pop     rbx

accessor32:
    add     rbx, rax
    xor     rax, rax
    mov     eax, [rbx + 8]
    pop     rbx

accessor16:
    add     rbx, rax
    xor     rax, rax
    mov     bx, [rbx + 8]
    pop     rbx

accessor8:
    add     rbx, rax
    xor     rax, rax
    mov     lx, [rbx + 8]
    pop     rbx

read64:
    mov     rax, [rax]

write64:
    mov     [rax], rbx
    pop     rax
    pop     rbx

read32:
    xor     rcx, rcx
    mov     ecx, [rax]
    mov     rax, rcx

write32:
    mov     [rax], ebx
    pop     rax
    pop     rbx

read16:
    xor     rcx, rcx
    mov     cx, [rax]
    mov     rax, rcx

write16:
    mov     [rax], bx
    pop     rax
    pop     rbx

read8:
    xor     rcx, rcx
    mov     lc, [rax]
    mov     rax, rcx

write8:
    mov     [rax], lb
    pop     rax
    pop     rbx

log:
    mov 	rdi, 1
	mov 	rdx, [rax]
	add		rax, 8
	mov 	rsi, rax
	mov 	rax, 1
	syscall
	mov 	rax, rbx
	pop 	rbx

prop:
    mov     rax, [rax + <offset>]

propAddr:
    add     rax, <offset>