
local variables defined with let in a func will be put on a 'local stack' (not real rsp stack). Local variable sizes are summed and stored, when a func return it will pop the size from the 'local stack'.

error handling:
func test1 int int -> int throws string in
    -
    if 0 == do
        throw "This is a error" end
    end
end

func test2 int int -> int throws string in
    try test1 end
end
//ending the return list with a 'throws' declares that this function can throw an error
//if the top of the local stack is non-zero when test2 completes, test1 will throw the error further
//the top of the local stack could potentially be an error code or a pointer to an error string, atom or exception struct

func test3 in
    catch test2 passed
        ...
    failed
        let error in
            error eputs
        end
    end
end

//a throws chain must at some point end with a catch (passed/threw)

//Lambda?:
x: y: x y +;
lambda ends with ';'?. Takes argument types from what consumes it.

fn x y in x y + end

//Define
func test int int -> int in ... end //1
//Overload
func test int void -> int in ... end //2
func test string int -> int in ... end //3
//Call 1
1 1 test
//Call 2
1 void test
//Call 3
"hello" 2 test

//Boxed types
start func main -> int in
    2 makeBox
    openBox
    0
end

func makeBox int -> boxed atom in
    if dup 0 == do
        drop "Hello World" box
    elif dup 1 == do
        drop 500 box
    elif dup 2 == do
        drop 'A' box
    else
        drop void box
    end
end

func openBox boxed atom in
    let b t in
        if t :string == do
            b as string drop
            "Was String" log
        elif t :int == do
            b as int drop
            "Was Int" log
        elif t :char == do
            b as char drop
            "Was Char" log
        end
    end
end


start func main -> int in
    1 :test is (int atom) test1 is (char string)
    test2 is (int)
end

func test1 int atom -> char string in
    drop drop 'A' "Hello"
end

func test2 char string -> int in
    drop drop 0
end


non-primitive types (>8 bytes) are allocated on a separate stack (dynamicStack)
//16 new array<byte> //Creates a 16 byte array (32 bytes in memory)
func makeBuffer -> buffer<byte> in
    16 new buffer<byte> ret
    // Creates a 16 byte buffer (24 bytes in memory)
    // the size (16) is stored in an 8 byte int, then the 16 bytes,
    // a pointer is returned from 'new' which points to the start of the 16 bytes
    // adds 16 to the DSP
end

func useBuffer -> int in
    makeBuffer drop 0 ret
    // Calling a function will put the current DSRP on the dynamicStack
    // Returning from a function will set the DSP to the
    // The compiler knows makeBuffer return a non-primitive type which mean it will add
    // copy operations from the pointer location to the new top of the dynamicStack
end

functions cannot return pointers to items on the local stack, ie ref<int> ref<char> etc.
(Maybe prevent them from ever being created?)

Infix functions:
// Exactly 1 argument and 1 returned value
func add int -> int in
    + ret
end
// This function can now be used in infix syntax
(5 add 4) // = 9